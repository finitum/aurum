// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finitum/aurum/pkg/store (interfaces: AurumStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	models "github.com/finitum/aurum/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAurumStore is a mock of AurumStore interface
type MockAurumStore struct {
	ctrl     *gomock.Controller
	recorder *MockAurumStoreMockRecorder
}

// MockAurumStoreMockRecorder is the mock recorder for MockAurumStore
type MockAurumStoreMockRecorder struct {
	mock *MockAurumStore
}

// NewMockAurumStore creates a new mock instance
func NewMockAurumStore(ctrl *gomock.Controller) *MockAurumStore {
	mock := &MockAurumStore{ctrl: ctrl}
	mock.recorder = &MockAurumStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAurumStore) EXPECT() *MockAurumStoreMockRecorder {
	return m.recorder
}

// AddGroupToUser mocks base method
func (m *MockAurumStore) AddGroupToUser(arg0 context.Context, arg1, arg2 string, arg3 models.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGroupToUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddGroupToUser indicates an expected call of AddGroupToUser
func (mr *MockAurumStoreMockRecorder) AddGroupToUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGroupToUser", reflect.TypeOf((*MockAurumStore)(nil).AddGroupToUser), arg0, arg1, arg2, arg3)
}

// CountUsers mocks base method
func (m *MockAurumStore) CountUsers(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers
func (mr *MockAurumStoreMockRecorder) CountUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockAurumStore)(nil).CountUsers), arg0)
}

// CreateGroup mocks base method
func (m *MockAurumStore) CreateGroup(arg0 context.Context, arg1 models.Group) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockAurumStoreMockRecorder) CreateGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockAurumStore)(nil).CreateGroup), arg0, arg1)
}

// CreateUser mocks base method
func (m *MockAurumStore) CreateUser(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAurumStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAurumStore)(nil).CreateUser), arg0, arg1)
}

// GetGroup mocks base method
func (m *MockAurumStore) GetGroup(arg0 context.Context, arg1 string) (*models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", arg0, arg1)
	ret0, _ := ret[0].(*models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockAurumStoreMockRecorder) GetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockAurumStore)(nil).GetGroup), arg0, arg1)
}

// GetGroupRole mocks base method
func (m *MockAurumStore) GetGroupRole(arg0 context.Context, arg1, arg2 string) (models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupRole indicates an expected call of GetGroupRole
func (mr *MockAurumStoreMockRecorder) GetGroupRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupRole", reflect.TypeOf((*MockAurumStore)(nil).GetGroupRole), arg0, arg1, arg2)
}

// GetGroups mocks base method
func (m *MockAurumStore) GetGroups(arg0 context.Context) ([]models.Group, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", arg0)
	ret0, _ := ret[0].([]models.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroups indicates an expected call of GetGroups
func (mr *MockAurumStoreMockRecorder) GetGroups(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockAurumStore)(nil).GetGroups), arg0)
}

// GetGroupsForUser mocks base method
func (m *MockAurumStore) GetGroupsForUser(arg0 context.Context, arg1 string) ([]models.GroupWithRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupsForUser", arg0, arg1)
	ret0, _ := ret[0].([]models.GroupWithRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupsForUser indicates an expected call of GetGroupsForUser
func (mr *MockAurumStoreMockRecorder) GetGroupsForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupsForUser", reflect.TypeOf((*MockAurumStore)(nil).GetGroupsForUser), arg0, arg1)
}

// GetUser mocks base method
func (m *MockAurumStore) GetUser(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockAurumStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAurumStore)(nil).GetUser), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockAurumStore) GetUsers(arg0 context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockAurumStoreMockRecorder) GetUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAurumStore)(nil).GetUsers), arg0)
}

// RemoveGroup mocks base method
func (m *MockAurumStore) RemoveGroup(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroup indicates an expected call of RemoveGroup
func (mr *MockAurumStoreMockRecorder) RemoveGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroup", reflect.TypeOf((*MockAurumStore)(nil).RemoveGroup), arg0, arg1)
}

// RemoveGroupFromUser mocks base method
func (m *MockAurumStore) RemoveGroupFromUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveGroupFromUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveGroupFromUser indicates an expected call of RemoveGroupFromUser
func (mr *MockAurumStoreMockRecorder) RemoveGroupFromUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGroupFromUser", reflect.TypeOf((*MockAurumStore)(nil).RemoveGroupFromUser), arg0, arg1, arg2)
}

// RemoveUser mocks base method
func (m *MockAurumStore) RemoveUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockAurumStoreMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockAurumStore)(nil).RemoveUser), arg0, arg1)
}

// SetGroupRole mocks base method
func (m *MockAurumStore) SetGroupRole(arg0 context.Context, arg1, arg2 string, arg3 models.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGroupRole", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGroupRole indicates an expected call of SetGroupRole
func (mr *MockAurumStoreMockRecorder) SetGroupRole(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGroupRole", reflect.TypeOf((*MockAurumStore)(nil).SetGroupRole), arg0, arg1, arg2, arg3)
}

// SetUser mocks base method
func (m *MockAurumStore) SetUser(arg0 context.Context, arg1 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser
func (mr *MockAurumStoreMockRecorder) SetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockAurumStore)(nil).SetUser), arg0, arg1)
}
