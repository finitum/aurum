// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/finitum/aurum/pkg/store (interfaces: AurumStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	models "github.com/finitum/aurum/pkg/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAurumStore is a mock of AurumStore interface
type MockAurumStore struct {
	ctrl     *gomock.Controller
	recorder *MockAurumStoreMockRecorder
}

// MockAurumStoreMockRecorder is the mock recorder for MockAurumStore
type MockAurumStoreMockRecorder struct {
	mock *MockAurumStore
}

// NewMockAurumStore creates a new mock instance
func NewMockAurumStore(ctrl *gomock.Controller) *MockAurumStore {
	mock := &MockAurumStore{ctrl: ctrl}
	mock.recorder = &MockAurumStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAurumStore) EXPECT() *MockAurumStoreMockRecorder {
	return m.recorder
}

// CountUsers mocks base method
func (m *MockAurumStore) CountUsers(arg0 context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers
func (mr *MockAurumStoreMockRecorder) CountUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockAurumStore)(nil).CountUsers), arg0)
}

// CreateUser mocks base method
func (m *MockAurumStore) CreateUser(arg0 context.Context, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAurumStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAurumStore)(nil).CreateUser), arg0, arg1)
}

// GetUser mocks base method
func (m *MockAurumStore) GetUser(arg0 context.Context, arg1 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockAurumStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAurumStore)(nil).GetUser), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockAurumStore) GetUsers(arg0 context.Context) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockAurumStoreMockRecorder) GetUsers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAurumStore)(nil).GetUsers), arg0)
}

// RemoveUser mocks base method
func (m *MockAurumStore) RemoveUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser
func (mr *MockAurumStoreMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockAurumStore)(nil).RemoveUser), arg0, arg1)
}

// SetUser mocks base method
func (m *MockAurumStore) SetUser(arg0 context.Context, arg1 models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", arg0, arg1)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser
func (mr *MockAurumStoreMockRecorder) SetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockAurumStore)(nil).SetUser), arg0, arg1)
}
